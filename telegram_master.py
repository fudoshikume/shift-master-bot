from datetime import time
from telegram import Update, Bot
from telegram.ext import CommandHandler, Application, ContextTypes, CallbackContext, Updater
import db
from shift_master import check_and_notify, full_stats, Player, generate_invoke_msg
from match_stats import generate_weekly_report, generate_all_time_report
from match_parser_instarun import run_loop
import asyncio
from dotenv import load_dotenv
import os
from zoneinfo import ZoneInfo
from match_collector_instarun_db import fetch_and_log_matches_for_last_day
from core import get_accusative_case, day_cases
from aiohttp import web
import aiohttp
from db import remove_player, add_player

kyiv_zone = ZoneInfo("Europe/Kyiv")

load_dotenv()  # Load variables from .env file

TG_Token = os.getenv("TELEGRAM_TOKEN")
platform="telegram"
# chatID = os.getenv("CHAT_ID")
loop_task = None

async def handle(request):
    return web.Response(text="Bot is running!")

async def start_web_server():
    app = web.Application()
    app.add_routes([web.get("/", handle)])
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", 8080)
    await site.start()

async def check_bot_permissions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    chat_member = await context.bot.get_chat_member(update.effective_chat.id, context.bot.id)
    # –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ —á–∏ –±–æ—Ç –º–∞—î –ø—Ä–∞–≤–∞ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —ñ–Ω—à—ñ –ø—Ä–∞–≤–∞)
    can_post_messages = getattr(chat_member, 'can_post_messages', True)  # True –¥–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø —ñ –∫–∞–Ω–∞–ª—ñ–≤ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    can_read_messages = chat_member.status in ['administrator', 'member']
    return can_post_messages and can_read_messages

async def register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    title = update.effective_chat.title

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–∞–Ω–∞–ª –≤–∂–µ –≤ –±–∞–∑—ñ
    if db.channel_exists(chat_id):
        await update.message.reply_text("–Ø —ñ —Ç–∞–∫ –≤–∂–µ —Ç—É—Ç –Ω–∞—á–∞–ª—å–Ω–∏–∫!")
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ —É –∫–∞–Ω–∞–ª—ñ
    has_perms = await check_bot_permissions(update, context)
    if not has_perms:
        await update.message.reply_text("–î–∞–π –º–µ–Ω—ñ –¥–æ—Å—Ç—É–ø –¥–æ –æ—Å–æ–±–æ–≤–∏—Ö —Å–ø—Ä–∞–≤! (–ø–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞)")
        return

    # –î–æ–¥–∞—î–º–æ –∫–∞–Ω–∞–ª —É –±–∞–∑—É

    try:
        await db.add_channel(chat_id, title)
        await update.message.reply_text("–£ –≤–∞—Å —Ç–µ–ø–µ—Ä –Ω–æ–≤–∏–π –Ω–∞—á –ø–æ –∫–∞–¥—Ä–∞—Ö!")
    except Exception as e:
        await update.message.reply_text(f"–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–∞–Ω–∞–ª—É: {e}")

async def send_stats(app, channels):
    print('gathering stats')
    for channel in channels:
        await fetch_and_log_matches_for_last_day(channel, days=1)
        text = await full_stats(channel, platform)
        await app.bot.sendMessage(chat_id=channel, text=text)

async def send_loss_stats(app, channels):
    for channel in channels:
        await fetch_and_log_matches_for_last_day(channel, days=1)
        text = await check_and_notify(channel, platform)
        if text:
            await app.bot.sendMessage(chat_id=channel, text=text)

async def send_weekly_stats(app, channels):
    for channel in channels:
        await fetch_and_log_matches_for_last_day(channel, 7)
        message = await generate_weekly_report(channel, "telegram")
        await app.bot.send_message(chat_id=channel, text=message)

async def alltime(update, context):
    await update.message.reply_text("üëÄ*—Ä–æ–∑—á–∏—â–∞—î –ø—ñ–¥–≤–∞–ª*...")
    channel = update.message.chat_id
    await fetch_and_log_matches_for_last_day(channel, days=1)
    message = await generate_all_time_report(channel, platform)
    await update.message.reply_text(message)

async def weekly(update, context):
    await update.message.reply_text("üëÄ*–ø—Ä–æ–≥–ª—è–¥–∞—î –∞—Ä—Ö—ñ–≤–∏*...")
    channel = update.message.chat_id
    await fetch_and_log_matches_for_last_day(channel, days=1)
    message = await generate_weekly_report(channel, platform)
    await update.message.reply_text(message)

# f() to handle /stats
async def stats(update, context):
    await update.message.reply_text("*–∫–æ–ø–∞—î—Ç—å—Å—è –≤ –≥—ñ–≤–Ω—ñ*...")
    channel = update.message.chat_id
    await fetch_and_log_matches_for_last_day(channel, days=1)
    result = await full_stats(platform, channel)
    await update.message.reply_text(result)

# f() to handle /losses
async def losses(update, context):
    await update.message.reply_text("*–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞ –∑–∞–ø–∞—Ö –¥—ñ–ª–¥–∞–∫–∏*...")
    channel = update.message.chat_id
    await fetch_and_log_matches_for_last_day(channel, days=1)
    result = await check_and_notify(channel, platform)
    if result:
        await update.message.reply_text(result)
    else:
        await update.message.reply_text("–ó–∞ –æ—Å—Ç–∞–Ω–Ω—é –≥–æ–¥–∏–Ω—É –≤ —Å–æ–ª–æ –Ω—ñ—Ö—Ç–æ –Ω–µ –ø—Ä–æ–≥—Ä–∞–≤–∞–≤")

# f() to make sure bot is running
async def status(update, context):
    await update.message.reply_text("–ù–∞—á–∞–ª—å–Ω–∏–∫ –∑–º—ñ–Ω–∏ –Ω–∞ –ø—Ä–æ–≤–æ–¥—ñ!")

async def gethelp(update, context):
    help_lines = [
        "ü§ñ *–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:*",
        "/gethelp ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥;",
        "/status ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –ë–æ—Ç–∞;",
        "/stats ‚Äî —Å—Ç–∞—Ç–∞ —Ä–æ–±–æ—Ç—è–≥ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏;",
        "/losses ‚Äî –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ —Å–æ–ª–æ-–Ω–µ–≤–¥–∞—Ö –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –≥–æ–¥–∏–Ω–∏;",
        "/addplayer <steam_id> <telegram_nick> <discord_nick (–æ–ø—Ü—ñ–π–Ω–æ)> ‚Äî –¥–æ–¥–∞—Ç–∏ –¥–æ—Å—å—î –≥—Ä–∞–≤—Ü—è –¥–æ —Ç–µ–∫–∏.",
        "   * Steam ID —ñ telegram nickname ‚Äî –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ;",
        "/removeplayer <steam_id32> ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ –¥–æ—Å—å—î –≥—Ä–∞–≤—Ü—è –∑ —Ç–µ–∫–∏;",
        "/weekly ‚Äî –∑–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–Ω–¥–∏ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å (üÜï);",
        "/alltime ‚Äî –∑–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≤–æ–¥—É –∑–∞ –≤–µ—Å—å —á–∞—Å (üÜï)"
        "/collect X ‚Äî –∑—ñ–±—Ä–∞—Ç–∏ —ñ–Ω—Ñ—É –ø—Ä–æ –º–∞—Ç—á—ñ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ X –¥–Ω—ñ–≤ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ ‚Äî 7);",
        "/parse X ‚Äî –ø—Ä–æ–ø–∞—Ä—Å–∏—Ç–∏ –º–∞—Ç—á—ñ –∑–∞ X –¥–Ω—ñ–≤ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ ‚Äî 7) [–ó–∞—Å—Ç–∞—Ä—ñ–ª–∞];",
        "/stopparse ‚Äî –∑—É–ø–∏–Ω–∏—Ç–∏ –ø–∞—Ä—Å–µ—Ä [–ó–∞—Å—Ç–∞—Ä—ñ–ª–∞];",
        "/invoke ‚Äî –∑–∞–∫–ª–∏–∫–∞—Ç–∏ –≤—Å—ñ—Ö –Ω–∞ –∑–∞–≤–æ–¥ üè≠",
        "",
        "üìé –ë—ñ–ª—å—à–µ —ñ–Ω—Ñ–∏ ‚Äî [@chuck.singer](https://t.me/chuck.singer)"
    ]
    await update.message.reply_text("\n".join(help_lines), parse_mode="Markdown")

async def invoke(update, context):
    channel_id = update.message.chat_id
    message = await generate_invoke_msg(platform, channel_id)  # platform is global
    await update.message.reply_text(message)

async def addplayer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /addplayer <steam_id32> <telegram_nick> [discord_nick]")
        return

    steam_id = context.args[0]
    if not steam_id.isdigit():
        await update.message.reply_text("‚ùå Steam ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")
        return

    steam_id = int(steam_id)
    telegram_nick = context.args[1]
    discord_nick = context.args[2] if len(context.args) > 2 else None

    nickname = Player.validate_steam_id(steam_id)
    if not nickname:
        await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≥—Ä–∞–≤—Ü—è –∑–∞ —Ü–∏–º Steam ID.")
        return

    name_dict = {"telegram": telegram_nick}
    if discord_nick:
        name_dict["discord"] = discord_nick

    context.user_data["pending_add"] = {
        "steam_id": steam_id,
        "name_dict": name_dict,
        "od_nick": nickname,
        "channel_ids": [update.effective_chat.id]  # –î–æ–¥–∞—î–º–æ chat_id –≤—ñ–¥—Ä–∞–∑—É —Å—é–¥–∏
    }

    await update.message.reply_text(
        f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ –≥—Ä–∞–≤—Ü—è –∑ –Ω—ñ–∫–æ–º: *{nickname}*.\n"
        f"–î–æ–¥–∞—Ç–∏ –¥–æ —Å–ø–∏—Å–∫—É? –ù–∞–ø–∏—à–∏ /yes –∞–±–æ /no –ø—Ä–æ—Ç—è–≥–æ–º 5 —Ö–≤–∏–ª–∏–Ω.",
        parse_mode="Markdown"
    )

    context.job_queue.run_once(
        timeout_pending_add,
        when=300,
        data={
            "chat_id": update.effective_chat.id,
            "user_id": update.effective_user.id
        },
        name=f"pending_add_{update.effective_user.id}"
    )

async def confirm_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pending_data = context.user_data.get("pending_add")
    user_id = update.effective_user.id

    if not pending_data:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–º–∞—î –≥—Ä–∞–≤—Ü—è –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.")
        return

    # –Ø–∫—â–æ —Ö–æ—á–µ—à –¥–æ–¥–∞—Ç–∫–æ–≤–æ –≥–∞—Ä–∞–Ω—Ç—É–≤–∞—Ç–∏, —â–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Ç –≤ channel_ids
    chat_id = update.effective_chat.id
    if chat_id not in pending_data.get("channel_ids", []):
        pending_data["channel_ids"].append(chat_id)

    success = add_player(pending_data)

    msg = "‚úÖ –ì—Ä–∞–≤—Ü—è –¥–æ–¥–∞–Ω–æ." if success else "‚ÑπÔ∏è –ì—Ä–∞–≤–µ—Ü—å –≤–∂–µ —ñ—Å–Ω—É—î –∞–±–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞."
    await update.message.reply_text(msg)

    job = context.user_data[user_id].pop("pending_add_job", None)
    if job:
        job.schedule_removal()

async def cancel_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    pending = context.application.user_data.get(user_id, {}).get("pending_add")

    if not pending:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–º–∞—î –≥—Ä–∞–≤—Ü—è –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")
        return

    context.application.user_data[user_id].pop("pending_add", None)
    job = context.application.user_data[user_id].pop("pending_add_job", None)
    if job:
        job.schedule_removal()

    await update.message.reply_text("‚ùå –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")

async def timeout_pending_add(context: ContextTypes.DEFAULT_TYPE):
    data = context.job.data
    chat_id = data["chat_id"]
    user_id = data["user_id"]

    # Remove pending add request if it still exists
    if "pending_add" in context.application.user_data[user_id]:
        del context.application.user_data[user_id]["pending_add"]
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚åõÔ∏è –ß–∞—Å –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–π—à–æ–≤. –ì—Ä–∞–≤—Ü—è –Ω–µ –¥–æ–¥–∞–Ω–æ."
        )

async def removeplayer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 1:
        await update.message.reply_text("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /removeplayer <steam_id>\n–ù–µ –∑–∞–±—É–¥—å –¥–æ–¥–∞—Ç–∏ Steam ID.")
        return

    steam_id = context.args[0]
    try:
        steam_id = int(steam_id)
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç Steam ID. –ú–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ.")
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ id –ø–æ—Ç–æ—á–Ω–æ–≥–æ —á–∞—Ç—É
    channel_id = str(update.effective_chat.id)

    response = remove_player(steam_id=steam_id, channel_id=channel_id)
    await update.message.reply_text(response)

async def fetch_and_log_matches(update: Update, context: CallbackContext):
    days_before = int(context.args[0]) if context.args else 1  # Default to 1 day if no argument is passed
    await update.message.reply_text(f"–ì–æ—Ä—Ç–∞—é –∑–≤—ñ—Ç–∏ –∑–∞ {days_before} {get_accusative_case(days_before, day_cases)}")
    await fetch_and_log_matches_for_last_day(days=days_before)
    await update.message.reply_text(f"–ü–µ—Ä–µ–≤—ñ—Ä–∏–≤ –∑–≤—ñ—Ç–∏ –∑–∞ –∑–º—ñ–Ω–∏ –∑ {days_before} {get_accusative_case(days_before, day_cases)}.")

async def start_parser(update, context):
    """Start the parser loop."""
    global loop_task
    try:
        days = int(context.args[0]) if context.args else 7  # Default to 7 days
        if loop_task and not loop_task.done():
            await update.message.reply_text("–ü–∞—Ä—Å–µ—Ä –≤–∂–µ –ø—Ä–∞—Ü—é—î!")
            return

        # Define the callback function to send a message when parsing is done
        async def send_completion_message(message):
            await update.message.reply_text(message)

        # Start the loop with the 'days' parameter and the callback
        loop_task = asyncio.create_task(run_loop(days, send_message_callback=send_completion_message))
        await update.message.reply_text(f"–ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ, —Ä–æ–±–∏–º–æ –º–∞—Ç—á—ñ –∑–∞ –æ—Å—Ç–∞—Ç–Ω—ñ {days} {get_accusative_case(days, day_cases)}.")
    except Exception as e:
        await update.message.reply_text(f"–®–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫: {e}")

async def stop_parser(update, context):
    """Stop the parser loop."""
    global loop_task
    if loop_task and not loop_task.done():
        loop_task.cancel()
        await update.message.reply_text("–ü–∞—Ä—Å–µ—Ä –∑—É–ø–∏–Ω–µ–Ω–æ.")
    else:
        await update.message.reply_text("–ù–µ–º–∞ —à–æ –∑—É–ø–∏–Ω—è—Ç–∏.")

# Setup the Telegram bot handlers
def setup_handlers(app):
    app.add_handler(CommandHandler("parse", start_parser))  # Start command
    app.add_handler(CommandHandler("stopparse", stop_parser))  # Stop command

async def main():
    async with aiohttp.ClientSession() as session:
        await session.post(f"https://api.telegram.org/bot{TG_Token}/deleteWebhook")

    await start_web_server()

    application = Application.builder().token(TG_Token).build()
    # Setup the HTTP server

    channels = db.get_channels()

    setup_handlers(application)
    # Setup handlers (e.g., your command handlers)
    application.add_handler(CommandHandler("register", register))
    application.add_handler(CommandHandler("status", status))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CommandHandler("losses", losses))
    application.add_handler(CommandHandler("gethelp", gethelp))
    application.add_handler(CommandHandler("addplayer", addplayer))
    application.add_handler(CommandHandler("removeplayer", removeplayer))
    application.add_handler(CommandHandler("yes", confirm_add))
    application.add_handler(CommandHandler("no", cancel_add))
    application.add_handler(CommandHandler("weekly", weekly))
    application.add_handler(CommandHandler("collect", fetch_and_log_matches))
    application.add_handler(CommandHandler("invoke", invoke))
    application.add_handler(CommandHandler("alltime", alltime))

    # Schedule recurring tasks using job_queue (no polling here)
    application.job_queue.run_daily(
        lambda context: asyncio.create_task(send_stats(application, channels)),
        time=time(hour=3, minute=0, tzinfo=kyiv_zone)
    )
    # application.job_queue.run_repeating(lambda context: asyncio.create_task(fetch_and_log_matches_for_last_day(1)), interval=79201)
    application.job_queue.run_repeating(lambda context: asyncio.create_task(send_loss_stats(application, channels)), interval=3590)
    application.job_queue.run_daily(
        lambda context: asyncio.create_task(send_weekly_stats(application, channels)),
        time=time(hour=15, minute=0),
        days=(0,),  # Sunday (0)
        name="weekly_report"
    )

    # Initialize the application and start the bot
    await application.initialize()
    await application.start()
    await application.bot.delete_webhook(drop_pending_updates=True)  # optional safety
    await application.updater.start_polling()

    # ‚úÖ Keep alive without causing loop conflicts
    await asyncio.Event().wait()

# Check if the loop is already running
if __name__ == "__main__":
    asyncio.run(main())